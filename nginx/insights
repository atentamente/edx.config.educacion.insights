upstream insights_app_server {
            server 127.0.0.1:8110 fail_timeout=0;
    }

server {
    listen 80;
    return 301 https://$host$request_uri;
}

# The Origin request header indicates where a fetch originates from. It doesn't include any path information,
# but only the server name (e.g. https://www.example.com).
# See https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin for details.
#
# Here we set the value that is included in the Access-Control-Allow-Origin response header. If the origin is one
# of our known hosts--served via HTTP or HTTPS--we allow for CORS. Otherwise, we set the "null" value, disallowing CORS.
map $http_origin $cors_origin {
  default "null";
  "~*^https?:\/\/insights$" $http_origin;
}

server {
  server_name insights.atentamente.mx;

  # Nginx does not support nested condition or or conditions so
  # there is an unfortunate mix of conditonals here.

  listen 443 ssl; # managed by Certbot
  ssl_certificate /etc/letsencrypt/live/insights.atentamente.mx/fullchain.pem; # managed by Certbot
  ssl_certificate_key /etc/letsencrypt/live/insights.atentamente.mx/privkey.pem; # managed by Certbot
  include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
  ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot




  location ~ ^/static/(?P<file>.*) {
    root /edx/var/insights;
    add_header Cache-Control "max-age=31536000";
    add_header 'Access-Control-Allow-Origin' $cors_origin;
    add_header 'Access-Control-Allow-Methods' 'HEAD, GET, OPTIONS';

    # Inform downstream caches to take certain headers into account when reading/writing to cache.
    add_header 'Vary' 'Accept-Encoding,Origin';

    try_files /staticfiles/$file =404;
  }

  location / {
    try_files $uri @proxy_to_app;
  }

  # No basic auth security on the heartbeat url, so that ELB can use it
  location /status {
    try_files $uri @proxy_to_app;
  }


location @proxy_to_app {
    proxy_set_header X-Forwarded-Proto $http_x_forwarded_proto;
    proxy_set_header X-Forwarded-Port $http_x_forwarded_port;
    proxy_set_header X-Forwarded-For $http_x_forwarded_for;

    # newrelic-specific header records the time when nginx handles a request.
    proxy_set_header X-Queue-Start "t=${msec}";

    proxy_set_header Host $http_host;

    proxy_redirect off;
    proxy_pass http://insights_app_server;
  }

  # Prevent invalid display courseware in IE 10+ with high privacy settings
  add_header P3P 'CP="Open edX does not have a P3P policy."';


}
